{"version":3,"sources":["components/Flex.js","game/engine.js","components/Game/MovesLoop.js","components/Game/Zone.js","components/Game.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Flex","styled","div","MOVES","isValidMove","move","indexOf","engine","Math","ceil","random","play","move1","move2","result","moves","forEach","Error","validateMoves","index1","index2","length","MovesLoop","useState","setMove","useEffect","handle","setTimeout","nextMove","clearTimeout","Zone","children","className","onClick","Game","status","setStatus","currentMove","setCurrentMove","cpuMove","setCpuMove","isPlaying","hasPlayed","reset","otherMove","advancePlay","toUpperCase","StyledFlex","map","PlayerZone","undefined","hidden","CenterAligned","Status","Button","CpuZone","isCpu","ul","StyledZone","li","button","FlexContainer","Layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8VAEA,IAIeA,EAJFC,IAAOC,IAAV,K,OCEJC,EAAQ,CAJD,OAEI,WADH,SASRC,EAAc,SAACC,GAAD,OAAUF,EAAMG,QAAQD,IAAS,GAuCtCE,EA9BA,CACbJ,QAGAE,KAAM,kBAAMF,EAAMK,KAAKC,KAAsB,EAAjBD,KAAKE,OAAO,IAAU,IAGlDC,KAAM,SAACC,EAAOC,GAEZ,IAAIC,EACJ,GAlBkB,WAAe,IAAD,uBAAVC,EAAU,yBAAVA,EAAU,gBAClCA,EAAMC,SAAQ,SAACX,GACb,IAAKD,EAAYC,GACf,MAAM,IAAIY,MAAJ,uBAA0BZ,OAalCa,CAAcN,EAAOC,GAEjBD,IAAUC,EACZC,EAvBM,UAwBD,CACL,IAAMK,EAAShB,EAAMG,QAAQM,GACvBQ,EAASjB,EAAMG,QAAQO,GAO3BC,EAJAK,IAAWC,EAAS,GAEnBD,IAAWhB,EAAMkB,OAAS,GAAgB,IAAXD,EAhC5B,MAEC,OAqCT,OAAON,IC3CHX,EAAUI,EAAVJ,MAoBOmB,EAdG,WAAO,IAAD,EACEC,mBAASpB,EAAM,IADjB,mBACfE,EADe,KACTmB,EADS,KAWtB,OARAC,qBAAU,WACR,IAAMC,EAASC,YAAW,WACxBH,EAPW,SAACnB,GAAD,OAAUF,GAAOA,EAAMG,QAAQD,GAAQ,GAAKF,EAAMkB,QAOrDO,CAASvB,MATC,KAapB,OAAO,kBAAMwB,aAAaH,MACzB,CAACrB,IACGA,GCXMyB,EANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,QAAxB,OACX,wBAAID,UAAWA,EAAWC,QAASA,GAChCF,I,4uCCEL,IAyDeG,EAjDF,WAAO,IAAD,EACWX,mBAAS,iBADpB,mBACVY,EADU,KACFC,EADE,OAEqBb,qBAFrB,mBAEVc,EAFU,KAEGC,EAFH,OAGaf,qBAHb,mBAGVgB,EAHU,KAGDC,EAHC,KAIXC,EAAYJ,IAAgBE,EAC5BG,EAAYL,GAAeE,EAE3BI,EAAQ,WACZL,IACAE,IACAJ,KAGIzB,EAAO,SAACN,GACZiC,EAAejC,GACf+B,EAAU,IACVT,YAAW,WAAO,IAAD,EAtBD,SAACtB,GACnB,IAAMuC,EAAYrC,EAAOF,OAEzB,MAAO,CAAEuC,YAAW9B,OADLP,EAAOI,KAAKN,EAAMuC,IAqBCC,CAAYxC,EAAKyC,eAAvCF,EADO,EACPA,UAAW9B,EADJ,EACIA,OACnB0B,EAAWI,GACXR,EAAU,OAAD,OAAQtB,MA3BC,MA+BtB,OACE,kBAACiC,EAAD,KAEGxC,EAAOJ,MAAM6C,KAAI,SAAC3C,GAAD,OAChB,kBAAC4C,EAAD,CACEhB,QAASQ,OAAYS,EAAYR,EAAYC,EAAQ,kBAAMhC,EAAKN,IAChE8C,OAAQd,GAAeA,IAAgBhC,GAEtCA,MAKL,kBAAC+C,EAAD,KACE,kBAACC,EAAD,KAASlB,GACRO,GAAa,kBAACY,EAAD,CAAQrB,QAASU,GAAjB,UAIfN,GACC,kBAACkB,EAAD,CAASC,OAAO,GAAOjB,GAAW,kBAAC,EAAD,SAQpCQ,EAAa9C,IAAOwD,GAAV,KASVC,EAAazD,YAAO6B,EAAP7B,CAAH,KAeVgD,EAAahD,YAAOyD,EAAPzD,CAAH,KAEH,qBAAGkD,OAAuB,OAAS,UAY1CI,EAAUtD,YAAOyD,EAAPzD,CAAH,KAKPoD,EAASpD,IAAOC,IAAV,KAMNkD,EAAgBnD,IAAO0D,GAAV,KAMbL,EAASrD,IAAO2D,OAAV,K,mLCnHZ,IAAMC,EAAgB5D,YAAOD,EAAPC,CAAH,KAgBJ6D,EARA,WACb,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,QCTSE,EAJH,WACV,OAAO,kBAAC,EAAD,OCUWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebd9286d.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Flex = styled.div`\n  display: flex;\n`;\n\nexport default Flex;\n","const ROCK = \"ROCK\";\nconst PAPER = \"PAPER\";\nconst SCISSORS = \"SCISSORS\";\n\nconst MOVES = [ROCK, SCISSORS, PAPER];\n\nconst WIN = \"WIN\";\nconst TIE = \"TIE\";\nconst LOSE = \"LOSE\";\n\nconst isValidMove = (move) => MOVES.indexOf(move) >= 0;\nconst validateMoves = (...moves) => {\n  moves.forEach((move) => {\n    if (!isValidMove(move)) {\n      throw new Error(`invalid move ${move}`);\n    }\n  });\n};\n\nconst engine = {\n  MOVES,\n\n  // get random move\n  move: () => MOVES[Math.ceil(Math.random(1) * 3) - 1],\n\n  // return result from move1 perspective\n  play: (move1, move2) => {\n    validateMoves(move1, move2);\n    let result;\n    if (move1 === move2) {\n      result = TIE;\n    } else {\n      const index1 = MOVES.indexOf(move1);\n      const index2 = MOVES.indexOf(move2);\n      if (\n        // in MOVES array, a move beats the one immediately after it...\n        index1 === index2 - 1 ||\n        // ... the last move beats the first move\n        (index1 === MOVES.length - 1 && index2 === 0)\n      ) {\n        result = WIN;\n      } else {\n        result = LOSE;\n      }\n    }\n    return result;\n  },\n};\n\nexport default engine;\n","import React, { useEffect, useState } from \"react\";\nimport engine from \"src/game/engine\";\nconst { MOVES } = engine;\n\nconst FRAME_LENGTH_MS = 100;\n\nconst nextMove = (move) => MOVES[(MOVES.indexOf(move) + 1) % MOVES.length];\n\nconst MovesLoop = () => {\n  const [move, setMove] = useState(MOVES[0]);\n\n  useEffect(() => {\n    const handle = setTimeout(() => {\n      setMove(nextMove(move));\n    }, FRAME_LENGTH_MS);\n\n    // effect cleanup\n    return () => clearTimeout(handle);\n  }, [move]);\n  return move;\n};\n\nexport default MovesLoop;\n","import React from \"react\";\n\nconst Zone = ({ children, className, onClick }) => (\n  <li className={className} onClick={onClick}>\n    {children}\n  </li>\n);\n\nexport default Zone;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport engine from \"src/game/engine\";\nimport MovesLoop from \"src/components/Game/MovesLoop\";\nimport Zone from \"src/components/Game/Zone\";\n\nconst CPU_THINKING_MS = 1000;\n\nconst advancePlay = (move) => {\n  const otherMove = engine.move();\n  const result = engine.play(move, otherMove);\n  return { otherMove, result };\n};\n\nconst Game = () => {\n  const [status, setStatus] = useState(\"Click to play\");\n  const [currentMove, setCurrentMove] = useState();\n  const [cpuMove, setCpuMove] = useState();\n  const isPlaying = currentMove && !cpuMove;\n  const hasPlayed = currentMove && cpuMove;\n\n  const reset = () => {\n    setCurrentMove();\n    setCpuMove();\n    setStatus();\n  };\n\n  const play = (move) => {\n    setCurrentMove(move);\n    setStatus(\"\");\n    setTimeout(() => {\n      const { otherMove, result } = advancePlay(move.toUpperCase());\n      setCpuMove(otherMove);\n      setStatus(`YOU ${result}`);\n    }, CPU_THINKING_MS);\n  };\n\n  return (\n    <StyledFlex>\n      {/* player */}\n      {engine.MOVES.map((move) => (\n        <PlayerZone\n          onClick={isPlaying ? undefined : hasPlayed ? reset : () => play(move)}\n          hidden={currentMove && currentMove !== move}\n        >\n          {move}\n        </PlayerZone>\n      ))}\n\n      {/* status / result */}\n      <CenterAligned>\n        <Status>{status}</Status>\n        {hasPlayed && <Button onClick={reset}>Again</Button>}\n      </CenterAligned>\n\n      {/* cpu */}\n      {currentMove && (\n        <CpuZone isCpu={true}>{cpuMove || <MovesLoop />}</CpuZone>\n      )}\n    </StyledFlex>\n  );\n};\n\nexport default Game;\n\nconst StyledFlex = styled.ul`\n  display: flex;\n  flex-flow: row;\n  width: 100%;\n  padding: 0;\n  justify-items: center;\n  align-items: center;\n`;\n\nconst StyledZone = styled(Zone)`\n  color: white;\n  border: 3px solid rgba(0, 0, 0, 0.2);\n  list-style: none;\n  height: 80vh;\n  width: 33%;\n  margin: 1%;\n  flex-grow: 1;\n  font-weight: bold;\n  font-size: 4vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PlayerZone = styled(StyledZone)`\n  background-color: rebeccapurple;\n  display: ${({ hidden }) => (hidden ? \"none\" : \"flex\")};\n  cursor: pointer;\n\n  &:hover {\n    background-color: mediumpurple;\n  }\n\n  &:active {\n    background-color: darkmagenta;\n  }\n`;\n\nconst CpuZone = styled(StyledZone)`\n  background-color: red;\n  font-family: Monaco, sans-serif;\n`;\n\nconst Status = styled.div`\n  color: white;\n  font-size: 10vw;\n  text-align: center;\n`;\n\nconst CenterAligned = styled.li`\n  font-size: 4vw;\n  text-align: center;\n  list-style: none;\n`;\n\nconst Button = styled.button`\n  font-size: 2vw;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Flex from \"src/components/Flex\";\nimport Game from \"src/components/Game\";\n\nconst FlexContainer = styled(Flex)`\n  width: 100%;\n  height: 100%;\n  min-height: 95vh;\n  align-items: center;\n  //background-color: green;\n`;\n\nconst Layout = () => {\n  return (\n    <FlexContainer>\n      <Game />\n    </FlexContainer>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"src/components/Layout\";\n\nconst App = () => {\n  return <Layout />;\n};\n\nexport default App;\n","/* eslint-env node */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        // eslint-disable-next-line\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        // eslint-disable-next-line\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}